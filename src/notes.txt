
Line 5: // const [value,setValue] = useState(null) lifting up of states
  // const [click,setClick] = useState(false)
  /* const char='X'*/
//   const handleClick=() => {
//     /* char=value?'X':'O'
//     // setValue(!value) */
//     if(click){
// setValue('X')
// setClick(false)
//     }
//     else{
//       setValue('O')
//       setClick(true)
//     }
//   }

<Square value={squares[0]} onSquareClick={handleClick(0)} />
Here is why this doesn’t work. The handleClick(0) call will be a part of rendering the board component. Because handleClick(0) alters the state of the board component by calling setSquares, your entire board component will be re-rendered again. But this runs handleClick(0) again, leading to an infinite loop:
Why didn’t this problem happen earlier?

When you were passing onSquareClick={handleClick}, you were passing the handleClick function down as a prop. You were not calling it! But now you are calling that function right away—notice the parentheses in handleClick(0)—and that’s why it runs too early. You don’t want to call handleClick until the user clicks!

You could fix this by creating a function like handleFirstSquareClick that calls handleClick(0), a function like handleSecondSquareClick that calls handleClick(1), and so on. You would pass (rather than call) these functions down as props like onSquareClick={handleFirstSquareClick}. This would solve the infinite loop.

However, defining nine different functions and giving each of them a name is too verbose. Instead, let’s do this:

Notice the new () => syntax. Here, () => handleClick(0) is an arrow function, which is a shorter way to define functions. When the square is clicked, the code after the => “arrow” will run, calling handleClick(0).
  // Since state is private to a component that defines it, you cannot update the Board’s state directly from Square.
// Instead, you’ll pass down a function from the Board component to the Square component, and you’ll have Square call that function when a square is clicked.  

Clicking on the upper left square runs the function that the button received as its onClick prop from the Square. The Square component received that function as its onSquareClick prop from the Board. The Board component defined that function directly in the JSX. It calls handleClick with an argument of 0.
handleClick uses the argument (0) to update the first element of the squares array from null to X.
The squares state of the Board component was updated, so the Board and all of its children re-render. This causes the value prop of the Square component with index 0 to change from null to X.

history arr: Notice how [Array(9).fill(null)] is an array with a single item, which itself is an array of 9 nulls.

